import numpy as np
def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    np.fill_diagonal(dist, 0)
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)
    for k in range(n):                          Floyd's Algorithm to find the shortest path between all pairs o
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    dist[dist == float('inf')] = -1
    return dist.astype(int)
n = 4 
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, -10]] 
distance_matrix = floyd_warshall(n, edges)
print(f"City 1 to City 3 = {distance_matrix[1][3]}")
Output:
City 1 to City 3 = -9



