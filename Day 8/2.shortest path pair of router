import numpy as np
def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w 
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist
n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distance_matrix = floyd_warshall(n, edges)
print("Distance Matrix Before:")
print(distance_matrix)
shortest_path = distance_matrix[2][0]
print("Shortest path from C to A:", shortest_path)
Output:
Distance Matrix Before:
[[0. 2. 5. 5. 4.]
[2. 0. 3. 3. 2.]
 [5. 3. 0. 1. 2.]
[5. 3. 1. 0. 1.]
 [4. 2. 2. 1. 0.]]
Shortest path from C to A: 5.0
