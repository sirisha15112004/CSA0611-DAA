import itertools
import math
def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2)
def tsp(cities):
    min_dist = float('inf')
    best_path = []
    for perm in itertools.permutations(cities[1:]):
        path = [cities[0]] + list(perm) + [cities[0]]
        dist = sum(distance(path[i], path[i + 1]) for i in range(len(path) - 1))
        if dist < min_dist:
            min_dist, best_path = dist, path
    return min_dist, best_path
cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]
cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]
result1 = tsp(cities1)
result2 = tsp(cities2)
print(f"Test Case 1:\nShortest Distance: {result1[0]}\nShortest Path: {result1[1]}")
print(f"Test Case 2:\nShortest Distance: {result2[0]}\nShortest Path: {result2[1]}")
Output:   
Shortest Distance: 16.969112047670894
Shortest Path: [(1, 2), (7, 1), (4, 5), (3, 6), (1, 2)]
Shortest Distance: 23.12995011084934
Shortest Path: [(2, 4), (6, 3), (8, 1), (5, 9), (1, 7), (2, 4)]
